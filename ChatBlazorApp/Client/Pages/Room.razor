@page "/{RoomName}"
@using ChatBlazorApp.Shared
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient Http

<!--
<p>@AppState.UserName</p>

<div class="form-group">
	<label>
		Message:
		<input @bind="messageInput" size="50" />
	</label>
</div>
<button @onclick="Send" disabled="@(HubConnection.State != HubConnectionState.Connected)">Send</button>
-->

<hr>

<ul id="messagesList">
	@foreach (var message in messages)
	{
		<li>@message</li>
	}
</ul>

<div id="footer">
    <input class="middle" placeholder="Enter a message" @bind="messageInput" @bind:event="oninput" hidden="@(HubConnection.State != HubConnectionState.Connected)"/>
    <button @onclick="Send" disabled="@(HubConnection.State != HubConnectionState.Connected)">Send</button>
	<button @onclick="ClearMessageInput" hidden="@EmptyMessageInput" >X</button>
</div>

@code {

	string previousRoomName = "";
	[Parameter] public string RoomName { get; set; }
	[CascadingParameter] public Microsoft.AspNetCore.SignalR.Client.HubConnection HubConnection { get; set; }

	private List<string> messages = new List<string>();
	private string userInput;
	private string messageInput;

	protected override async Task OnParametersSetAsync()
	{
		if (RoomName == previousRoomName)
			return;
		previousRoomName = RoomName;
		messages.Clear();
		userInput = "";
		messageInput = "";

		if (AppState.Rooms.ContainsKey(RoomName))
		{
			AppState.Rooms[RoomName] = 0;
			AppState.AppStateUpdated?.Invoke();
		}

		AppState.CurrentRoom = this;

		var previousChats = await Http.GetFromJsonAsync<ChatData[]>($"Chat/{RoomName}");

		if (previousChats != null)
		{
			foreach (var previousChat in previousChats)
			{
				var encodedMsg = $"{previousChat.User}: {previousChat.Message}";
				messages.Add(encodedMsg);
			}
		}
	}

	public void ReceiveMessage(string message)
	{
		messages.Add(message);
		StateHasChanged();
	}

	private async Task Send()
	{
		await HubConnection.SendAsync("SendMessage", AppState.UserName, messageInput, RoomName);
		ClearMessageInput();
	}


	// Clear any text typed in by the user
	private void ClearMessageInput()
    {
        this.messageInput = "";
    }

	// Hide the clear button if there is no text
	private bool EmptyMessageInput => this.messageInput != "";
}